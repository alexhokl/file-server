// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/users": {
            "get": {
                "description": "List all users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "List users",
                "responses": {
                    "200": {
                        "description": "list of user names",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create user",
                "parameters": [
                    {
                        "description": "User information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.createUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.createdUserResponse"
                        }
                    },
                    "400": {
                        "description": "empty username"
                    },
                    "409": {
                        "description": "username already exists"
                    },
                    "500": {
                        "description": "unable to create user"
                    }
                }
            }
        },
        "/users/{username}": {
            "delete": {
                "description": "Delete a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "user deleted"
                    },
                    "400": {
                        "description": "empty username"
                    },
                    "404": {
                        "description": "user not found"
                    },
                    "500": {
                        "description": "unable to delete user"
                    }
                }
            }
        },
        "/users/{username}/credentials": {
            "get": {
                "description": "List all credentials of a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "credentials"
                ],
                "summary": "List user credentials",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.credentialInfo"
                            }
                        }
                    },
                    "400": {
                        "description": "empty username"
                    },
                    "404": {
                        "description": "user not found"
                    },
                    "500": {
                        "description": "unable to retrieve user credentials"
                    }
                }
            },
            "post": {
                "description": "Create a new credential for a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "credentials"
                ],
                "summary": "Create user credential",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Credential information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.createUserCredentialRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.createUserCredentialResponse"
                        }
                    },
                    "400": {
                        "description": "empty username or invalid public key"
                    },
                    "404": {
                        "description": "user not found"
                    },
                    "409": {
                        "description": "public key already exists"
                    },
                    "500": {
                        "description": "unable to create user credential"
                    }
                }
            }
        },
        "/users/{username}/credentials/{credential_id}": {
            "delete": {
                "description": "Delete a credential of a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "credentials"
                ],
                "summary": "Delete user credential",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Credential ID",
                        "name": "credential_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "credential deleted"
                    },
                    "400": {
                        "description": "empty username or credential ID"
                    },
                    "404": {
                        "description": "credential not found"
                    },
                    "500": {
                        "description": "unable to delete user credential"
                    }
                }
            }
        }
    },
    "definitions": {
        "api.createUserCredentialRequest": {
            "type": "object",
            "required": [
                "public_key"
            ],
            "properties": {
                "public_key": {
                    "description": "PublicKey is the public key of the user",
                    "type": "string",
                    "example": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDZ cardno:000607000043"
                }
            }
        },
        "api.createUserCredentialResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt is the time when the user credential is added and it has the format of RFC3339",
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "id": {
                    "description": "ID is the ID of the user credential created",
                    "type": "integer",
                    "example": 10
                },
                "public_key": {
                    "description": "PublicKey is the public key of the user",
                    "type": "string",
                    "example": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDZ cardno:000607000043"
                },
                "username": {
                    "description": "Username is the username of the user",
                    "type": "string",
                    "example": "alice"
                }
            }
        },
        "api.createUserRequest": {
            "type": "object",
            "required": [
                "username"
            ],
            "properties": {
                "username": {
                    "description": "Username is the username of the user",
                    "type": "string",
                    "example": "alice"
                }
            }
        },
        "api.createdUserResponse": {
            "type": "object",
            "properties": {
                "username": {
                    "description": "Username is the username of the user",
                    "type": "string",
                    "example": "alice"
                }
            }
        },
        "api.credentialInfo": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "ID is the ID of the user credential",
                    "type": "integer",
                    "example": 10
                },
                "public_key": {
                    "description": "PublicKey is the public key of the user",
                    "type": "string",
                    "example": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDZ cardno:000607000043"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
